{
  "openapi": "3.1.0",
  "info": {
    "title": "Project Beta API",
    "description": "AI-powered content generation platform API",
    "version": "0.0.171"
  },
  "paths": {
    "/api/v2/brands": {
      "post": {
        "tags": [
          "brands"
        ],
        "summary": "Create Brand",
        "description": "Create a new brand and automatically trigger knowledge workflow.\n\nCreates a new brand with server-generated ID and immediately starts\na knowledge extraction workflow in the background.",
        "operationId": "create_brand_api_v2_brands_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "409": {
            "description": "Brand with this name already exists"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "brands"
        ],
        "summary": "List Brands",
        "description": "List all brands.\n\nReturns a list of brands with pagination support.",
        "operationId": "list_brands_api_v2_brands_get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of brands returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandResponse"
                  },
                  "title": "Response List Brands Api V2 Brands Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}": {
      "put": {
        "tags": [
          "brands"
        ],
        "summary": "Update Brand",
        "description": "Update an existing brand.\n\nUpdates an existing brand. Returns 404 if the brand doesn't exist.\nOnly provided fields will be updated (partial update).",
        "operationId": "update_brand_api_v2_brands__brandId__put",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "400": {
            "description": "Invalid request data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "brands"
        ],
        "summary": "Get Brand",
        "description": "Get brand information.\n\nReturns the brand details and status.\nReturns 404 if brand doesn't exist.",
        "operationId": "get_brand_api_v2_brands__brandId__get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand information returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/with-files": {
      "post": {
        "tags": [
          "brands"
        ],
        "summary": "Create Brand With Files",
        "description": "Create a new brand with file uploads.\n\nCreates a new brand with server-generated ID and handles file uploads for\nbrand guidelines (PDF) and logo (PNG/JPEG/JPG). Files are uploaded to\nGoogle Cloud Storage and URLs are stored in the brand record.",
        "operationId": "create_brand_with_files_api_v2_brands_with_files_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_brand_with_files_api_v2_brands_with_files_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Brand created successfully with file uploads",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data or file validation failed"
          },
          "409": {
            "description": "Brand with this name already exists"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/with-files": {
      "put": {
        "tags": [
          "brands"
        ],
        "summary": "Update Brand With Files",
        "description": "Update an existing brand with file uploads.\n\nUpdates an existing brand and handles file uploads for brand guidelines (PDF)\nand logo (PNG/JPEG/JPG). New files replace existing ones. Returns 404 if the\nbrand doesn't exist. Only provided fields will be updated (partial update).",
        "operationId": "update_brand_with_files_api_v2_brands__brandId__with_files_put",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_brand_with_files_api_v2_brands__brandId__with_files_put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand updated successfully with file uploads",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "400": {
            "description": "Invalid request data or file validation failed"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/colors": {
      "put": {
        "tags": [
          "brands"
        ],
        "summary": "Update Brand Colors",
        "description": "Update selected brand colors (including custom colors).\n\nUpdates the brand colors with enhanced metadata including color names,\nusage roles (primary/secondary/accent), and custom status.",
        "operationId": "update_brand_colors_api_v2_brands__brandId__colors_put",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandColorsUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand colors updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandColorsUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "400": {
            "description": "Invalid color data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/extraction/progress": {
      "get": {
        "tags": [
          "brands"
        ],
        "summary": "Get Extraction Progress",
        "description": "Real-time progress updates during brand data extraction.\n\nReturns detailed progress information for the brand extraction workflow.\nSupports polling for real-time updates.",
        "operationId": "get_extraction_progress_api_v2_brands__brandId__extraction_progress_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Progress data retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandExtractionProgressResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand or extraction job not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/knowledge": {
      "get": {
        "tags": [
          "brand-workflow"
        ],
        "summary": "Get Brand Knowledge V2",
        "description": "Get extracted brand knowledge in V2 format.\n\nReturns the extracted brand knowledge including personality traits,\ntone attributes, color palette, products, and descriptions. This endpoint\nprovides the structured knowledge after workflow completion.",
        "operationId": "get_brand_knowledge_v2_api_v2_brands__brandId__knowledge_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Brand knowledge returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/src__schemas__brand_knowledge__BrandKnowledgeV2Response"
                }
              }
            }
          },
          "404": {
            "description": "Brand knowledge not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/onboarding/progress": {
      "patch": {
        "tags": [
          "brands"
        ],
        "summary": "Update Brand Onboarding Progress",
        "description": "Update brand onboarding progress step.\n\nTracks onboarding workflow progress including current step, completed steps,\nand optional metadata to keep the frontend aligned with backend state.",
        "operationId": "update_brand_onboarding_progress_api_v2_brands__brandId__onboarding_progress_patch",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandOnboardingProgressUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand onboarding progress updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandOnboardingProgressResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid progress data"
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/complete": {
      "post": {
        "tags": [
          "brands"
        ],
        "summary": "Complete Brand Onboarding",
        "description": "Mark brand onboarding as complete and finalize brand profile.\n\nValidates that all required approvals have been given and marks\nthe brand onboarding process as completed.",
        "operationId": "complete_brand_onboarding_api_v2_brands__brandId__complete_post",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandOnboardingComplete"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand onboarding completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandOnboardingCompleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Required approvals missing"
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/files": {
      "post": {
        "tags": [
          "brands"
        ],
        "summary": "Upload Brand Files",
        "description": "Upload brand files (guidelines PDF and logo).\n\nProper REST endpoint for uploading brand files to an existing brand.\nReplaces the non-RESTful /with-files endpoint.",
        "operationId": "upload_brand_files_api_v2_brands__brandId__files_post",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_brand_files_api_v2_brands__brandId__files_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Brand files uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file format or size"
          },
          "404": {
            "description": "Brand not found"
          },
          "413": {
            "description": "File too large"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "brands"
        ],
        "summary": "Update Brand Files",
        "description": "Update brand files (guidelines PDF and logo).\n\nProper REST endpoint for updating brand files.\nReplaces the non-RESTful /with-files endpoint.",
        "operationId": "update_brand_files_api_v2_brands__brandId__files_put",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_update_brand_files_api_v2_brands__brandId__files_put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Brand files updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file format or size"
          },
          "404": {
            "description": "Brand not found"
          },
          "413": {
            "description": "File too large"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/knowledge/workflows": {
      "post": {
        "tags": [
          "brand-workflow"
        ],
        "summary": "Start Knowledge Workflow",
        "description": "Start knowledge discovery workflow for a brand.\n\nCreates a new workflow resource that orchestrates website crawling,\ncontent extraction, and knowledge storage. This is an explicit trigger\nfollowing RMM Level 2 principles.\n\nThe workflow runs asynchronously. Poll the status endpoint to monitor progress.\n\nDesign Pattern (RMM L2):\n- POST creates a workflow resource (not an RPC \"scrape\" action)\n- Returns 202 Accepted (async processing)\n- Provides workflow_id for status polling\n- Idempotent: multiple POSTs return existing workflow if already running",
        "operationId": "start_knowledge_workflow_api_v2_brands__brandId__knowledge_workflows_post",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Workflow started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "404": {
            "description": "Brand not found"
          },
          "409": {
            "description": "Workflow already running for this brand"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/knowledge/workflows/{workflowId}": {
      "get": {
        "tags": [
          "brand-workflow"
        ],
        "summary": "Get Brand Workflow",
        "description": "Get the status of the knowledge collection workflow.\n\nReturns the current status of the background workflow including\nprogress, current step, and any results. This endpoint is used\nby the frontend to monitor the progress of the knowledge extraction\nthat was initiated internally during brand creation.",
        "operationId": "get_brand_workflow_api_v2_brands__brandId__knowledge_workflows__workflowId__get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "workflowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The workflow ID",
              "title": "Workflowid"
            },
            "description": "The workflow ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow status returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowResponse"
                }
              }
            }
          },
          "404": {
            "description": "No workflow found for this brand"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/pages": {
      "post": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "Crawl Single Page",
        "description": "Crawl a single page for workflow-driven crawling.\n\nThis endpoint is designed to be called by Google Cloud Workflows\nfor each individual page. The workflow handles iteration and\norchestrates the overall crawling process.",
        "operationId": "crawl_single_page_api_v2_brands__brandId__pages_post",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/src__schemas__crawled_pages__CrawlPageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Page crawled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlPageWorkflowResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "List Brand Pages",
        "description": "List crawled pages for a brand.\n\nCan optionally filter by website URL to get pages from a specific website.",
        "operationId": "list_brand_pages_api_v2_brands__brandId__pages_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "website_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by website URL (can be domain or full URL)",
              "title": "Website Url"
            },
            "description": "Filter by website URL (can be domain or full URL)"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of pages",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of pages"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of pages to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of pages to skip"
          },
          {
            "name": "processed_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only return processed pages",
              "default": false,
              "title": "Processed Only"
            },
            "description": "Only return processed pages"
          }
        ],
        "responses": {
          "200": {
            "description": "List of crawled pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrawledPageResponse"
                  },
                  "title": "Response List Brand Pages Api V2 Brands  Brandid  Pages Get"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/knowledge/extract": {
      "post": {
        "tags": [
          "brand-workflow"
        ],
        "summary": "Extract Brand Knowledge",
        "description": "Extract and create knowledge from crawled pages.\n\nAnalyzes crawled content to extract and store brand knowledge including\npersonality traits, tone attributes, visual style, products, etc.\nThis is a workflow operation typically triggered by crawling completion.",
        "operationId": "extract_brand_knowledge_api_v2_brands__brandId__knowledge_extract_post",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractKnowledgeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Knowledge extracted and created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractKnowledgeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Knowledge extraction failed"
          }
        }
      }
    },
    "/api/v2/campaigns": {
      "get": {
        "tags": [
          "campaigns"
        ],
        "summary": "List Campaigns",
        "description": "List all campaigns.\n\nReturns a list of all campaigns for the authenticated user.",
        "operationId": "list_campaigns_api_v2_campaigns_get",
        "responses": {
          "200": {
            "description": "List of campaigns returned",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CampaignResponse"
                  },
                  "type": "array",
                  "title": "Response List Campaigns Api V2 Campaigns Get"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "campaigns"
        ],
        "summary": "Create Campaign",
        "description": "Create a new campaign.\n\nCreates a new campaign with server-generated ID. The campaign name should be unique.",
        "operationId": "create_campaign_api_v2_campaigns_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Campaign created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "409": {
            "description": "Campaign with this name already exists"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}": {
      "put": {
        "tags": [
          "campaigns"
        ],
        "summary": "Update Campaign",
        "description": "Update an existing campaign (full update).\n\nUpdates an existing campaign. Returns 404 if the campaign doesn't exist.\nOnly provided fields will be updated (partial update).",
        "operationId": "update_campaign_api_v2_campaigns__campaign_id__put",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The campaign ID",
              "title": "Campaign Id"
            },
            "description": "The campaign ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Campaign updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found"
          },
          "400": {
            "description": "Invalid request data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "campaigns"
        ],
        "summary": "Patch Campaign",
        "description": "Partially update a campaign (e.g., publish).\n\nThis is the RMM Level 2 compliant endpoint for partial campaign updates.\nInstead of POST /campaigns/{id}/publish, use PATCH with status update.\n\nExample: To publish a campaign, send PATCH with {\"status\": \"published\"}",
        "operationId": "patch_campaign_api_v2_campaigns__campaign_id__patch",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The campaign ID",
              "title": "Campaign Id"
            },
            "description": "The campaign ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Campaign updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found"
          },
          "400": {
            "description": "Invalid request data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "campaigns"
        ],
        "summary": "Get Campaign",
        "description": "Get campaign information.\n\nReturns the campaign details and status.\nReturns 404 if campaign doesn't exist.",
        "operationId": "get_campaign_api_v2_campaigns__campaign_id__get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The campaign ID",
              "title": "Campaign Id"
            },
            "description": "The campaign ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign information returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "campaigns"
        ],
        "summary": "Delete Campaign",
        "description": "Delete a campaign.\n\nDeletes the specified campaign. Returns 204 on successful deletion.\nReturns 404 if campaign doesn't exist.",
        "operationId": "delete_campaign_api_v2_campaigns__campaign_id__delete",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The campaign ID",
              "title": "Campaign Id"
            },
            "description": "The campaign ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Campaign deleted successfully"
          },
          "404": {
            "description": "Campaign not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}/statistics": {
      "get": {
        "tags": [
          "campaigns"
        ],
        "summary": "Get Campaign Statistics",
        "description": "Get campaign statistics.\n\nReturns detailed statistics for a specific campaign including engagement metrics,\nplatform breakdown, content performance, and campaign progress.",
        "operationId": "get_campaign_statistics_api_v2_campaigns__campaign_id__statistics_get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The campaign ID",
              "title": "Campaign Id"
            },
            "description": "The campaign ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Campaign statistics returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignStatistics"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}/publications": {
      "post": {
        "tags": [
          "campaigns"
        ],
        "summary": "Create Campaign Publication",
        "description": "Create a campaign publication (RMM L2: publication is a resource).\n\nDirect port from V1 POST /api/v1/campaign/publish endpoint.\n\nRMM L2 Rationale:\n- Publications are resources representing published campaign instances\n- Creating publication is resource creation (not RPC-style /publish)\n- Publications track platform, schedule, and status\n\nThis endpoint:\n- Validates campaign exists and has approved content\n- Schedules posts via Cloud Scheduler (TODO)\n- Returns publication summary with scheduling results",
        "operationId": "create_campaign_publication_api_v2_campaigns__campaign_id__publications_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The campaign ID",
              "title": "Campaign Id"
            },
            "description": "The campaign ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignPublicationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Publication created and scheduled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignPublicationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Campaign not found"
          },
          "400": {
            "description": "Invalid publication data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}/content": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Campaign Content",
        "description": "Get content for a campaign.\n\nThis is the RMM Level 2 compliant endpoint for retrieving campaign content.\nReturns the full content structure with weeks, days, and posts.",
        "operationId": "get_campaign_content_api_v2_campaigns__campaign_id__content_get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Campaign Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedContent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Generate Campaign Content",
        "description": "Generate content for a campaign.\n\nThis is the RMM Level 2 compliant endpoint for generating content for a specific campaign.\nCreates a new content record associated with the campaign.",
        "operationId": "generate_campaign_content_api_v2_campaigns__campaign_id__content_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Campaign Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/approvals": {
      "post": {
        "tags": [
          "content-approval"
        ],
        "summary": "Approve Content",
        "description": "Approve or unapprove content for a specific day.\n\nThis endpoint allows users to approve/reject content for a specific day.\nUpdates approval status in database and manages approval counters.\nDirect port from V1 tag v0.2.46.\n\nArgs:\n    content_id: ID of the content to approve\n    request: Approval request with week, day, and post data\n    content_approval_service: Injected service\n\nReturns:\n    Updated day data with approval status\n\nRaises:\n    HTTPException: 404 if content not found, 400 if request invalid",
        "operationId": "approve_content_api_v2_content__content_id__approvals_post",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentApprovalRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentApprovalResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}": {
      "patch": {
        "tags": [
          "content"
        ],
        "summary": "Update Content",
        "description": "Update content fields (e.g., approval status).\n\nThis is the RMM Level 2 compliant endpoint for content updates including approval.\nInstead of POST /content/{id}/approve, we use PATCH /content/{id} with approved=true.\n\nExample: To approve content, send PATCH with {\"approved\": 1}",
        "operationId": "update_content_api_v2_content__content_id__patch",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Content",
        "description": "Create new content or regenerate existing content.\n\nThis is the RMM Level 2 compliant endpoint for content creation/regeneration.\nInstead of POST /content/{id}/regenerate, we POST to /content to create a new version.\n\nThe client can include metadata indicating this is a regeneration of existing content.",
        "operationId": "create_content_api_v2_content_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/regenerate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Regenerate Content",
        "description": "Regenerate image and/or text for content.\n\nDirect port from V1 (tag v0.2.46) regeneration endpoint.\nEnforces plan limits: FREE=3, PRO=10 regenerations per post.\n\nArgs:\n    content_id: Content identifier (from URL path)\n    request: Regeneration request with optional custom prompt\n\nReturns:\n    RegenerationResponse with new image URL, prompt, remaining generations, and new text\n\nRaises:\n    400 Bad Request: If content not found or generation limit exceeded\n    500 Internal Server Error: If regeneration fails",
        "operationId": "regenerate_content_api_v2_content__content_id__regenerate_post",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegenerationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegenerationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/versions": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Content Version",
        "description": "Create a new version of content (RMM L2 compliant regeneration).\n\nThis is the REST-compliant version of content regeneration.\nInstead of POST /regenerate (verb), we POST /versions (noun) to create a resource.\n\nDirect port from V1 (tag v0.2.46) with proper REST design:\n- Creates a new version as a resource\n- Maintains parent-child lineage\n- Enforces plan limits: FREE=3, PRO=10 versions per content\n\nArgs:\n    content_id: Content identifier (from URL path)\n    request: Version creation request with parent ID and optional prompt\n\nReturns:\n    ContentVersionResponse with new version details and quota info\n\nRaises:\n    400 Bad Request: If content not found or generation limit exceeded\n    500 Internal Server Error: If version creation fails",
        "operationId": "create_content_version_api_v2_content__content_id__versions_post",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentVersionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentVersionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/captions": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Generate Caption",
        "description": "Generate captions for content.",
        "operationId": "generate_caption_api_v2_content__content_id__captions_post",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptionCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Captions",
        "description": "Get all captions for a content item.",
        "operationId": "get_captions_api_v2_content__content_id__captions_get",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaptionResponse"
                  },
                  "title": "Response Get Captions Api V2 Content  Content Id  Captions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/captions/{caption_id}/regenerate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Regenerate Caption",
        "description": "Regenerate a specific caption.",
        "operationId": "regenerate_caption_api_v2_content__content_id__captions__caption_id__regenerate_post",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          },
          {
            "name": "caption_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Caption Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptionRegenerateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/captions/{caption_id}": {
      "delete": {
        "tags": [
          "content"
        ],
        "summary": "Delete Caption",
        "description": "Delete a specific caption.",
        "operationId": "delete_caption_api_v2_content__content_id__captions__caption_id__delete",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          },
          {
            "name": "caption_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Caption Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/captions/validate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Validate Captions",
        "description": "Validate captions against brand guidelines.",
        "operationId": "validate_captions_api_v2_captions_validate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptionValidationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptionValidationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}/policy": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Scene Mix Policy",
        "description": "Create a scene mix policy for a campaign.",
        "operationId": "create_scene_mix_policy_api_v2_campaigns__campaign_id__policy_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Campaign Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SceneMixPolicyCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SceneMixPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Scene Mix Policy",
        "description": "Get scene mix policy for a campaign.",
        "operationId": "get_scene_mix_policy_api_v2_campaigns__campaign_id__policy_get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Campaign Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SceneMixPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}/policy/{policy_id}": {
      "put": {
        "tags": [
          "content"
        ],
        "summary": "Update Scene Mix Policy",
        "description": "Update a scene mix policy.",
        "operationId": "update_scene_mix_policy_api_v2_campaigns__campaign_id__policy__policy_id__put",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Campaign Id"
            }
          },
          {
            "name": "policy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Policy Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SceneMixPolicyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SceneMixPolicyResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/campaigns/{campaign_id}/plan": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Scene Mix Plan",
        "description": "Create a scene mix plan for a campaign.",
        "operationId": "create_scene_mix_plan_api_v2_campaigns__campaign_id__plan_post",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Campaign Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SceneMixPlanCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SceneMixPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Scene Mix Plan",
        "description": "Get scene mix plan for a campaign.",
        "operationId": "get_scene_mix_plan_api_v2_campaigns__campaign_id__plan_get",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Campaign Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SceneMixPlanResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/images/generate": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Generate Image",
        "description": "Generate an image using AI.",
        "operationId": "generate_image_api_v2_images_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageGenerateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/images/batch": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Generate Images Batch",
        "description": "Generate multiple images in batch.",
        "operationId": "generate_images_batch_api_v2_images_batch_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageBatchResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/images/remix/{image_id}": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Remix Image",
        "description": "Remix an existing image.",
        "operationId": "remix_image_api_v2_images_remix__image_id__post",
        "parameters": [
          {
            "name": "image_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Image Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageRemixRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integrations/redirect-uri": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Get Integration Redirect Uri",
        "description": "Get OAuth redirect URI for platform integration.",
        "operationId": "get_integration_redirect_uri_api_v2_integrations_redirect_uri_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationRedirectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationRedirectResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integrations": {
      "get": {
        "tags": [
          "content"
        ],
        "summary": "Get Integrations",
        "description": "Get all configured integrations.",
        "operationId": "get_integrations_api_v2_integrations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationsListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integrations/{platform}/auth": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Authenticate Integration",
        "description": "Authenticate with a platform.",
        "operationId": "authenticate_integration_api_v2_integrations__platform__auth_post",
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Platform"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationAuthRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/integrations/{platform}": {
      "delete": {
        "tags": [
          "content"
        ],
        "summary": "Disconnect Integration",
        "description": "Disconnect a platform integration.",
        "operationId": "disconnect_integration_api_v2_integrations__platform__delete",
        "parameters": [
          {
            "name": "platform",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Platform"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{contentId}/text-versions": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Update text versions for content",
        "description": "Updates text, text_versions array, and selected image index. Direct port from V1.",
        "operationId": "update_text_versions_api_v2_content__contentId__text_versions_post",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contentid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTextVersionsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateTextVersionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{contentId}/status": {
      "patch": {
        "tags": [
          "content"
        ],
        "summary": "Update Content Status",
        "description": "Update content approval status.\n\nRMM L2 Compliance: Status is a field on the content resource (not /approve action).\nThis replaces the V1 POST /api/v1/contentgen/approve endpoint.\n\nArgs:\n    contentId: UUID of the content to update\n    status_update: New status and optional metadata\n    user_id: ID of user making the change (from auth)\n    content_status_service: Injected status service\n\nReturns:\n    ContentStatusResponse with updated status and metadata\n\nRaises:\n    HTTPException: 400 for invalid transition, 404 if content not found",
        "operationId": "update_content_status_api_v2_content__contentId__status_patch",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Contentid"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "placeholder-user-id",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentStatusUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/content/{content_id}/exports": {
      "post": {
        "tags": [
          "content"
        ],
        "summary": "Create Content Export",
        "description": "Create export tracking record for content.\n\nRMM L2: Creates an export resource (not RPC-style \"track-export\" action).\nThis endpoint replaces V1's POST /contentgen/track-export.\n\nArgs:\n    content_id: UUID of the content being exported\n    export_data: Export tracking data (platform, timestamp, metadata)\n\nReturns:\n    Created export record with ID and timestamps\n\nRaises:\n    404: Content not found\n    422: Invalid export data",
        "operationId": "create_content_export_api_v2_content__content_id__exports_post",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentExportCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExportResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "content"
        ],
        "summary": "List Content Exports",
        "description": "List all export records for a content item.\n\nRMM L2: Retrieves export resources for a content item.\nReturns list ordered by exported_at descending (most recent first).\n\nArgs:\n    content_id: UUID of the content\n\nReturns:\n    List of export records with total count\n\nRaises:\n    404: Content not found\n    422: Invalid content_id format",
        "operationId": "list_content_exports_api_v2_content__content_id__exports_get",
        "parameters": [
          {
            "name": "content_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Content Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentExportListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/pages/count": {
      "get": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "Count Brand Pages",
        "description": "Get the count of crawled pages for a brand.",
        "operationId": "count_brand_pages_api_v2_brands__brandId__pages_count_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "processed_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Only count processed pages",
              "default": false,
              "title": "Processed Only"
            },
            "description": "Only count processed pages"
          }
        ],
        "responses": {
          "200": {
            "description": "Page count for brand",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Count Brand Pages Api V2 Brands  Brandid  Pages Count Get"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/crawl-queue/initialize": {
      "post": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "Initialize Crawl Session",
        "description": "Initialize a new crawl session for a brand.\n\nCleans up any previous queue entries and sets up a fresh crawl\nwith the starting URL.",
        "operationId": "initialize_crawl_session_api_v2_brands__brandId__crawl_queue_initialize_post",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitializeCrawlRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Crawl session initialized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitializeCrawlResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data"
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/crawl-queue/next": {
      "get": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "Get Next Url To Crawl",
        "description": "Get the next URL to crawl from the queue.\n\nReturns the highest priority pending URL, or null if no URLs\nare available to crawl.",
        "operationId": "get_next_url_to_crawl_api_v2_brands__brandId__crawl_queue_next_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "base_domain",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Base domain for the crawl session",
              "title": "Base Domain"
            },
            "description": "Base domain for the crawl session"
          }
        ],
        "responses": {
          "200": {
            "description": "Next URL retrieved (or no URLs available)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextUrlResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/crawl-queue/{queueEntryId}": {
      "put": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "Update Crawl Queue Entry",
        "description": "Update the status of a crawl queue entry.\n\nCalled by workflows after attempting to crawl a URL to\nupdate its status and any relevant metadata.",
        "operationId": "update_crawl_queue_entry_api_v2_brands__brandId__crawl_queue__queueEntryId__put",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "queueEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The queue entry ID",
              "title": "Queueentryid"
            },
            "description": "The queue entry ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrawlQueueUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Queue entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlQueueResponse"
                }
              }
            }
          },
          "404": {
            "description": "Queue entry not found"
          },
          "400": {
            "description": "Invalid update data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/crawl-queue": {
      "get": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "List Crawl Queue Entries",
        "description": "List crawl queue entries for a brand with optional filtering.",
        "operationId": "list_crawl_queue_entries_api_v2_brands__brandId__crawl_queue_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "base_domain",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by base domain",
              "title": "Base Domain"
            },
            "description": "Filter by base domain"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Maximum number of entries",
              "default": 100,
              "title": "Limit"
            },
            "description": "Maximum number of entries"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "description": "Number of entries to skip",
              "default": 0,
              "title": "Offset"
            },
            "description": "Number of entries to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "Queue entries retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrawlQueueResponse"
                  },
                  "title": "Response List Crawl Queue Entries Api V2 Brands  Brandid  Crawl Queue Get"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/pages/{pageId}": {
      "get": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "Get Page",
        "description": "Get a specific crawled page by ID.",
        "operationId": "get_page_api_v2_brands__brandId__pages__pageId__get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "pageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The page ID",
              "title": "Pageid"
            },
            "description": "The page ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawled page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawledPageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Page not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/brands/{brandId}/pages/unprocessed": {
      "get": {
        "tags": [
          "crawled-pages"
        ],
        "summary": "List Unprocessed Pages",
        "description": "List unprocessed crawled pages for a brand.",
        "operationId": "list_unprocessed_pages_api_v2_brands__brandId__pages_unprocessed_get",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The brand ID",
              "title": "Brandid"
            },
            "description": "The brand ID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Maximum number of pages",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of pages"
          }
        ],
        "responses": {
          "200": {
            "description": "List of unprocessed pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CrawledPageResponse"
                  },
                  "title": "Response List Unprocessed Pages Api V2 Brands  Brandid  Pages Unprocessed Get"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint.",
        "operationId": "health_check_api_v2_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Check Api V2 Health Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/user": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Profile",
        "description": "Get authenticated user profile.\n\nArgs:\n    credentials: Bearer token from request header\n    user_service: Injected user service\n    auth_service: Injected auth service\n\nReturns:\n    User profile with brand ownership status\n\nRaises:\n    HTTPException: If authentication fails or user not found",
        "operationId": "get_user_profile_api_v2_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v2/user/register": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Register User",
        "description": "Register a new user.\n\nArgs:\n    request: User registration details\n    user_service: Injected user service\n    auth_service: Injected auth service\n\nReturns:\n    Registration confirmation\n\nRaises:\n    HTTPException: If registration fails",
        "operationId": "register_user_api_v2_user_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegisterResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/user/profile": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update User Profile",
        "description": "Update user profile.\n\nArgs:\n    request: Update details\n    credentials: Bearer token from request header\n    user_service: Injected user service\n    auth_service: Injected auth service\n\nReturns:\n    Updated user information\n\nRaises:\n    HTTPException: If update fails",
        "operationId": "update_user_profile_api_v2_user_profile_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v2/user/me/regeneration-quota": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Regeneration Quota",
        "description": "Get user's regeneration quota.\n\nArgs:\n    credentials: Bearer token from request header\n    user_service: Injected user service\n    auth_service: Injected auth service\n\nReturns:\n    Regeneration quota information\n\nRaises:\n    HTTPException: If authentication fails or quota retrieval fails",
        "operationId": "get_regeneration_quota_api_v2_user_me_regeneration_quota_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegenerationQuotaResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/api/v2/utilities/color-names": {
      "post": {
        "tags": [
          "Utilities"
        ],
        "summary": "Convert hex codes to color names",
        "description": "Convert a list of hex color codes to human-readable, creative color names using LLM",
        "operationId": "convert_hex_to_color_names_api_v2_utilities_color_names_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorNameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColorNameResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint returning API information.",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Root  Get"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_create_brand_with_files_api_v2_brands_with_files_post": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Brand name"
          },
          "website": {
            "type": "string",
            "title": "Website",
            "description": "Brand website URL"
          },
          "brand_colors": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Colors",
            "description": "JSON array of RGB hex codes"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Brand industry"
          },
          "target_audience": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Audience",
            "description": "Target audience description"
          },
          "brand_guidelines": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Guidelines"
          },
          "logo": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          }
        },
        "type": "object",
        "required": [
          "name",
          "website"
        ],
        "title": "Body_create_brand_with_files_api_v2_brands_with_files_post"
      },
      "Body_update_brand_files_api_v2_brands__brandId__files_put": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Brand name"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Brand website URL"
          },
          "brand_colors": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Colors",
            "description": "JSON array of RGB hex codes"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Brand industry"
          },
          "target_audience": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Audience",
            "description": "Target audience"
          },
          "brand_guidelines": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Guidelines"
          },
          "logo": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          }
        },
        "type": "object",
        "title": "Body_update_brand_files_api_v2_brands__brandId__files_put"
      },
      "Body_update_brand_with_files_api_v2_brands__brandId__with_files_put": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Brand name"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Brand website URL"
          },
          "brand_colors": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Colors",
            "description": "JSON array of RGB hex codes"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Brand industry"
          },
          "target_audience": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Audience",
            "description": "Target audience"
          },
          "brand_guidelines": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Guidelines"
          },
          "logo": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          }
        },
        "type": "object",
        "title": "Body_update_brand_with_files_api_v2_brands__brandId__with_files_put"
      },
      "Body_upload_brand_files_api_v2_brands__brandId__files_post": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Brand name"
          },
          "website": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Brand website URL"
          },
          "brand_colors": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Colors",
            "description": "JSON array of RGB hex codes"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Brand industry"
          },
          "target_audience": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Audience",
            "description": "Target audience"
          },
          "brand_guidelines": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Guidelines"
          },
          "logo": {
            "anyOf": [
              {
                "type": "string",
                "format": "binary"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          }
        },
        "type": "object",
        "title": "Body_upload_brand_files_api_v2_brands__brandId__files_post"
      },
      "BrandColor": {
        "properties": {
          "colorHex": {
            "type": "string",
            "pattern": "^#[0-9A-Fa-f]{6}$",
            "title": "Colorhex",
            "description": "Color in hex format (e.g., #FF0000)"
          },
          "colorName": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Colorname",
            "description": "Human-readable name for the color"
          },
          "usage": {
            "type": "string",
            "enum": [
              "primary",
              "secondary",
              "accent"
            ],
            "title": "Usage",
            "description": "Role of color in brand palette"
          },
          "isCustom": {
            "type": "boolean",
            "title": "Iscustom",
            "description": "Whether this color was custom-added by user",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "colorHex",
          "colorName",
          "usage"
        ],
        "title": "BrandColor",
        "description": "Brand color schema with metadata."
      },
      "BrandColorsUpdate": {
        "properties": {
          "brandColors": {
            "items": {
              "$ref": "#/components/schemas/BrandColor"
            },
            "type": "array",
            "maxItems": 10,
            "minItems": 1,
            "title": "Brandcolors",
            "description": "Updated brand colors with metadata"
          }
        },
        "type": "object",
        "required": [
          "brandColors"
        ],
        "title": "BrandColorsUpdate",
        "description": "Schema for updating brand colors."
      },
      "BrandColorsUpdateResponse": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "colorsUpdated": {
            "type": "integer",
            "title": "Colorsupdated",
            "description": "Number of colors updated"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "Timestamp when colors were updated"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "colorsUpdated",
          "updatedAt"
        ],
        "title": "BrandColorsUpdateResponse",
        "description": "Schema for brand colors update response."
      },
      "BrandCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "website": {
            "type": "string",
            "title": "Website",
            "description": "Brand website URL"
          },
          "brandColors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandcolors",
            "description": "List of brand colors (RGB hex codes from color picker)"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry",
            "description": "Brand industry or sector"
          },
          "targetAudience": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Targetaudience",
            "description": "Description of target audience"
          }
        },
        "type": "object",
        "required": [
          "name",
          "website"
        ],
        "title": "BrandCreate",
        "description": "Schema for creating a new brand."
      },
      "BrandExtractionProgress": {
        "properties": {
          "percentage": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Percentage",
            "description": "Progress percentage (0-100)"
          },
          "currentStep": {
            "type": "string",
            "title": "Currentstep",
            "description": "Current step being processed"
          },
          "stepsCompleted": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Stepscompleted",
            "description": "Number of steps completed"
          },
          "totalSteps": {
            "type": "integer",
            "exclusiveMinimum": 0.0,
            "title": "Totalsteps",
            "description": "Total number of steps in the process"
          },
          "itemsCrawled": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Itemscrawled",
            "description": "Number of items crawled so far",
            "default": 0
          },
          "estimatedTimeRemaining": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Estimatedtimeremaining",
            "description": "Estimated time remaining in seconds"
          }
        },
        "type": "object",
        "required": [
          "percentage",
          "currentStep",
          "stepsCompleted",
          "totalSteps"
        ],
        "title": "BrandExtractionProgress",
        "description": "Schema for brand extraction progress information."
      },
      "BrandExtractionProgressResponse": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "extractionJobId": {
            "type": "string",
            "title": "Extractionjobid",
            "description": "Extraction job ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "processing",
              "completed",
              "failed"
            ],
            "title": "Status",
            "description": "Current extraction status"
          },
          "progress": {
            "$ref": "#/components/schemas/BrandExtractionProgress",
            "description": "Detailed progress information"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "title": "Lastupdated",
            "description": "When the progress was last updated"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "extractionJobId",
          "status",
          "progress",
          "lastUpdated"
        ],
        "title": "BrandExtractionProgressResponse",
        "description": "Schema for brand extraction progress response."
      },
      "BrandOnboardingComplete": {
        "properties": {
          "reviewedData": {
            "$ref": "#/components/schemas/BrandOnboardingReview",
            "description": "Review status of all onboarding data"
          },
          "additionalNotes": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Additionalnotes",
            "description": "Additional notes about the onboarding completion"
          }
        },
        "type": "object",
        "required": [
          "reviewedData"
        ],
        "title": "BrandOnboardingComplete",
        "description": "Schema for completing brand onboarding."
      },
      "BrandOnboardingCompleteResponse": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "status": {
            "$ref": "#/components/schemas/OnboardingStatus",
            "description": "Status after completion",
            "default": "completed"
          },
          "completedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Completedat",
            "description": "Timestamp when onboarding was completed"
          },
          "profileUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profileurl",
            "description": "URL to the completed brand profile"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "completedAt"
        ],
        "title": "BrandOnboardingCompleteResponse",
        "description": "Schema for brand onboarding completion response."
      },
      "BrandOnboardingProgressResponse": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "currentStep": {
            "type": "string",
            "title": "Currentstep",
            "description": "Current step in the onboarding process"
          },
          "completedSteps": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Completedsteps",
            "description": "List of completed steps in chronological order"
          },
          "progressPercentage": {
            "type": "integer",
            "maximum": 100.0,
            "minimum": 0.0,
            "title": "Progresspercentage",
            "description": "Overall progress percentage (0-100)",
            "default": 0
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata about the current step or progress"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "When the progress was last updated"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "currentStep",
          "updatedAt"
        ],
        "title": "BrandOnboardingProgressResponse",
        "description": "Schema for brand onboarding progress response."
      },
      "BrandOnboardingProgressUpdate": {
        "properties": {
          "currentStep": {
            "type": "string",
            "maxLength": 100,
            "title": "Currentstep",
            "description": "Current step in the onboarding process (e.g., 'brand-info', 'assets-upload', 'knowledge-review')"
          },
          "completedSteps": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completedsteps",
            "description": "List of completed steps in chronological order"
          },
          "progressPercentage": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progresspercentage",
            "description": "Overall progress percentage (0-100)"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional metadata about the current step or progress"
          }
        },
        "type": "object",
        "required": [
          "currentStep"
        ],
        "title": "BrandOnboardingProgressUpdate",
        "description": "Schema for updating brand onboarding progress step."
      },
      "BrandOnboardingReview": {
        "properties": {
          "knowledgeApproved": {
            "type": "boolean",
            "title": "Knowledgeapproved",
            "description": "Whether the extracted brand knowledge has been approved"
          },
          "assetsApproved": {
            "type": "boolean",
            "title": "Assetsapproved",
            "description": "Whether the uploaded brand assets have been approved"
          },
          "colorsApproved": {
            "type": "boolean",
            "title": "Colorsapproved",
            "description": "Whether the brand colors have been approved"
          }
        },
        "type": "object",
        "required": [
          "knowledgeApproved",
          "assetsApproved",
          "colorsApproved"
        ],
        "title": "BrandOnboardingReview",
        "description": "Schema for reviewing brand onboarding data."
      },
      "BrandResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Website"
          },
          "id": {
            "type": "string",
            "title": "ID"
          },
          "brandGuidelinesUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandguidelinesurl",
            "description": "Google Cloud Storage URL for brand guidelines PDF"
          },
          "logoUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Logourl",
            "description": "Google Cloud Storage URL for brand logo"
          },
          "brandColors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandcolors",
            "description": "Brand colors (RGB hex codes from frontend or extracted during crawling)"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry"
          },
          "targetAudience": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Targetaudience"
          },
          "status": {
            "$ref": "#/components/schemas/BrandStatus"
          },
          "workflowId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Workflowid",
            "description": "ID of the associated brand extraction workflow"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "title": "BrandResponse",
        "description": "Schema for brand responses."
      },
      "BrandStatus": {
        "type": "string",
        "enum": [
          "active",
          "inactive"
        ],
        "title": "BrandStatus",
        "description": "Brand status enumeration."
      },
      "BrandUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "website": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Website",
            "description": "Brand website URL"
          },
          "brandGuidelinesUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandguidelinesurl"
          },
          "logoUrl": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Logourl"
          },
          "brandColors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandcolors",
            "description": "List of brand colors (RGB hex codes)"
          },
          "industry": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100
              },
              {
                "type": "null"
              }
            ],
            "title": "Industry"
          },
          "targetAudience": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Targetaudience"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BrandStatus"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "BrandUpdate",
        "description": "Schema for updating an existing brand."
      },
      "CampaignContentResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "arr": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Arr"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "CampaignContentResponse",
        "description": "Schema for complete campaign content response.\n\nMatches V1 response format: {id: str, arr: [week1, week2, ...]}.\nThis is the exact structure returned by GET /api/v1/get-content."
      },
      "CampaignCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "durationWeeks": {
            "type": "integer",
            "maximum": 52.0,
            "minimum": 1.0,
            "title": "Duration Weeks",
            "default": 1
          },
          "postsPerDay": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Posts Per Day",
            "default": 3
          },
          "campaignType": {
            "$ref": "#/components/schemas/CampaignType",
            "title": "Campaign Type",
            "description": "Type of media content for the campaign",
            "default": "image"
          },
          "campaignVariables": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Campaign Variables"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "CampaignCreate",
        "description": "Schema for creating a new campaign."
      },
      "CampaignPublicationCreate": {
        "properties": {
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "IANA timezone for scheduling"
          },
          "scheduled_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scheduled At",
            "description": "Optional scheduled publication time"
          }
        },
        "type": "object",
        "required": [
          "timezone"
        ],
        "title": "CampaignPublicationCreate",
        "description": "Request schema for creating a publication.\n\nDirect port from V1 PublishRequest model with timezone field.\nRMM L2: Creating a publication is resource creation, not an action."
      },
      "CampaignPublicationResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Publication status message"
          },
          "scheduled": {
            "type": "integer",
            "title": "Scheduled",
            "description": "Number of posts successfully scheduled"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of posts processed"
          },
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PublishedPostSummary"
            },
            "type": "array",
            "title": "Posts",
            "description": "Details of scheduled posts"
          },
          "publication_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Publication Id",
            "description": "Unique publication identifier"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Publication creation timestamp"
          }
        },
        "type": "object",
        "required": [
          "message",
          "scheduled",
          "total"
        ],
        "title": "CampaignPublicationResponse",
        "description": "Response schema for publication creation.\n\nDirect port from V1 publish endpoint response format.\nTracks publication status and scheduled posts."
      },
      "CampaignResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "durationWeeks": {
            "type": "integer",
            "maximum": 52.0,
            "minimum": 1.0,
            "title": "Duration Weeks",
            "default": 1
          },
          "postsPerDay": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Posts Per Day",
            "default": 3
          },
          "campaignType": {
            "$ref": "#/components/schemas/CampaignType",
            "title": "Campaign Type",
            "description": "Type of media content for the campaign",
            "default": "image"
          },
          "campaignVariables": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Campaign Variables"
          },
          "id": {
            "type": "integer",
            "title": "ID"
          },
          "userId": {
            "type": "string",
            "title": "User ID"
          },
          "status": {
            "$ref": "#/components/schemas/CampaignStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "startDate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Campaign Start Date"
          },
          "timezone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Campaign Timezone"
          },
          "postingDate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Post Date"
          },
          "contentCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Content Count",
            "default": 0
          },
          "approvedCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved Content Count",
            "default": 0
          },
          "pendingCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pending Content Count",
            "default": 0
          },
          "generatingCount": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Generating Content Count",
            "default": 0
          },
          "currentWeek": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Week Number",
            "description": "Current week number in campaign (1-indexed), 0 if not started"
          },
          "formattedDateRange": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Formatted Date Range",
            "description": "Human-readable date range (e.g., 'Jan 1 - Jan 31, 2025')"
          },
          "postingSchedule": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Posting Schedule",
            "description": "Array of posting times with timezone (e.g., ['9 AM GMT', '2 PM GMT'])"
          },
          "weekProgress": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Week Progress Percentage",
            "description": "Campaign progress as percentage (0.0 to 100.0)"
          },
          "isCompleted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Campaign Completed",
            "description": "Whether campaign end date has passed"
          },
          "daysRemaining": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Days Remaining",
            "description": "Number of days remaining in campaign (0 if completed)"
          }
        },
        "type": "object",
        "required": [
          "name",
          "id",
          "userId",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "title": "CampaignResponse",
        "description": "Schema for campaign responses."
      },
      "CampaignStatistics": {
        "properties": {
          "campaignId": {
            "type": "integer",
            "title": "Campaign ID"
          },
          "totalPosts": {
            "type": "integer",
            "title": "Total Posts"
          },
          "publishedPosts": {
            "type": "integer",
            "title": "Published Posts"
          },
          "scheduledPosts": {
            "type": "integer",
            "title": "Scheduled Posts"
          },
          "draftPosts": {
            "type": "integer",
            "title": "Draft Posts"
          },
          "totalImpressions": {
            "type": "integer",
            "title": "Total Impressions",
            "default": 0
          },
          "totalEngagements": {
            "type": "integer",
            "title": "Total Engagements",
            "default": 0
          },
          "averageEngagementRate": {
            "type": "number",
            "title": "Average Engagement Rate",
            "default": 0.0
          },
          "platformStats": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Platform Statistics"
          },
          "bestPerformingTime": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Best Performing Time"
          },
          "bestPerformingDay": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Best Performing Day"
          },
          "topPerformingPosts": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Top Performing Posts"
          },
          "contentTypePerformance": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Content Type Performance"
          },
          "completionPercentage": {
            "type": "number",
            "title": "Campaign Completion %",
            "default": 0.0
          },
          "daysRemaining": {
            "type": "integer",
            "title": "Days Remaining",
            "default": 0
          },
          "postsRemaining": {
            "type": "integer",
            "title": "Posts Remaining",
            "default": 0
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "campaignId",
          "totalPosts",
          "publishedPosts",
          "scheduledPosts",
          "draftPosts",
          "lastUpdated"
        ],
        "title": "CampaignStatistics",
        "description": "Schema for campaign statistics."
      },
      "CampaignStatus": {
        "type": "string",
        "enum": [
          "draft",
          "active",
          "paused",
          "completed",
          "archived"
        ],
        "title": "CampaignStatus",
        "description": "Campaign status enumeration."
      },
      "CampaignType": {
        "type": "string",
        "enum": [
          "image",
          "video"
        ],
        "title": "CampaignType",
        "description": "Campaign type enumeration for media content types."
      },
      "CampaignUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "durationWeeks": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 52.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Duration Weeks"
          },
          "postsPerDay": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 10.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Posts Per Day"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CampaignStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "campaignType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CampaignType"
              },
              {
                "type": "null"
              }
            ],
            "title": "Campaign Type",
            "description": "Type of media content for the campaign"
          },
          "campaignVariables": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Campaign Variables"
          }
        },
        "type": "object",
        "title": "CampaignUpdate",
        "description": "Schema for updating an existing campaign."
      },
      "CaptionCreate": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Caption text"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Target platform (instagram, facebook, linkedin)"
          },
          "tone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone",
            "description": "Desired tone (professional, casual, friendly)"
          },
          "hashtags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hashtags",
            "description": "Hashtags to include"
          },
          "maxLength": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxlength",
            "description": "Maximum caption length"
          },
          "brandVoice": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandvoice",
            "description": "Brand voice guidelines"
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "CaptionCreate",
        "description": "Schema for creating a caption."
      },
      "CaptionRegenerateRequest": {
        "properties": {
          "feedback": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feedback",
            "description": "User feedback on current caption"
          },
          "adjustments": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Adjustments",
            "description": "Specific adjustments to make"
          },
          "tone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone",
            "description": "New tone to apply"
          },
          "maxLength": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxlength",
            "description": "New maximum length"
          },
          "includeHashtags": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Includehashtags",
            "description": "Whether to include hashtags",
            "default": true
          }
        },
        "type": "object",
        "title": "CaptionRegenerateRequest",
        "description": "Schema for regenerating a caption."
      },
      "CaptionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Caption ID"
          },
          "contentId": {
            "type": "string",
            "title": "Contentid",
            "description": "Parent content ID"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Caption text"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Target platform"
          },
          "tone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tone",
            "description": "Caption tone"
          },
          "hashtags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Hashtags",
            "description": "Included hashtags"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Approval status",
            "default": false
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Generatedat",
            "description": "Generation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "Last update timestamp"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "contentId",
          "text",
          "generatedAt",
          "updatedAt"
        ],
        "title": "CaptionResponse",
        "description": "Schema for caption response."
      },
      "CaptionValidationRequest": {
        "properties": {
          "captions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Captions",
            "description": "List of captions to validate"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform",
            "description": "Platform-specific validation rules"
          },
          "brandGuidelines": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandguidelines",
            "description": "Brand guidelines to check against"
          }
        },
        "type": "object",
        "required": [
          "captions"
        ],
        "title": "CaptionValidationRequest",
        "description": "Schema for validating captions."
      },
      "CaptionValidationResponse": {
        "properties": {
          "valid": {
            "type": "boolean",
            "title": "Valid",
            "description": "Overall validation result"
          },
          "results": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Results",
            "description": "Individual caption validation results"
          },
          "suggestions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Suggestions",
            "description": "Improvement suggestions"
          }
        },
        "type": "object",
        "required": [
          "valid",
          "results"
        ],
        "title": "CaptionValidationResponse",
        "description": "Schema for caption validation response."
      },
      "ColorMapping": {
        "properties": {
          "hex": {
            "type": "string",
            "title": "Hex",
            "description": "Hex color code (e.g., #FF5733)"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Human-readable color name (e.g., Sunset Orange)"
          }
        },
        "type": "object",
        "required": [
          "hex",
          "name"
        ],
        "title": "ColorMapping",
        "description": "Single color hex to name mapping."
      },
      "ColorNameRequest": {
        "properties": {
          "hex_codes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 20,
            "minItems": 1,
            "title": "Hex Codes",
            "description": "List of hex color codes to convert",
            "example": [
              "#FF5733",
              "#C70039",
              "#900C3F"
            ]
          }
        },
        "type": "object",
        "required": [
          "hex_codes"
        ],
        "title": "ColorNameRequest",
        "description": "Request schema for color name conversion."
      },
      "ColorNameResponse": {
        "properties": {
          "colors": {
            "items": {
              "$ref": "#/components/schemas/ColorMapping"
            },
            "type": "array",
            "title": "Colors",
            "description": "List of color mappings with hex codes and names"
          }
        },
        "type": "object",
        "required": [
          "colors"
        ],
        "title": "ColorNameResponse",
        "description": "Response schema for color name conversion."
      },
      "ContentApprovalRequest": {
        "properties": {
          "campaign_content_id": {
            "type": "string",
            "title": "Campaign Content Id",
            "description": "ID of the content document"
          },
          "week": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Week",
            "description": "Week number (1-indexed)"
          },
          "day": {
            "type": "integer",
            "maximum": 7.0,
            "minimum": 1.0,
            "title": "Day",
            "description": "Day number (1-7)"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Whether to approve or unapprove"
          },
          "timezone": {
            "type": "string",
            "title": "Timezone",
            "description": "Timezone for scheduling"
          },
          "posts": {
            "patternProperties": {
              "^post_\\d+$": {
                "$ref": "#/components/schemas/PostContent"
              }
            },
            "type": "object",
            "title": "Posts",
            "description": "Map of post keys to post content"
          }
        },
        "type": "object",
        "required": [
          "campaign_content_id",
          "week",
          "day",
          "approved",
          "timezone",
          "posts"
        ],
        "title": "ContentApprovalRequest",
        "description": "Request schema for approving/unapproving content for a specific day.\n\nThis is a direct port of V1's ApproveRequest schema."
      },
      "ContentApprovalResponse": {
        "properties": {
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "description": "Whether the day is approved"
          },
          "posts": {
            "additionalProperties": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "object",
            "title": "Posts",
            "description": "Updated posts data"
          }
        },
        "type": "object",
        "required": [
          "approved",
          "posts"
        ],
        "title": "ContentApprovalResponse",
        "description": "Response schema for content approval.\n\nReturns the updated day data after approval/unapproval."
      },
      "ContentCreate": {
        "properties": {
          "campaignId": {
            "type": "integer",
            "title": "Campaignid"
          },
          "userId": {
            "type": "string",
            "title": "Userid"
          },
          "readyForReview": {
            "type": "integer",
            "title": "Readyforreview",
            "default": 0
          },
          "approved": {
            "type": "integer",
            "title": "Approved",
            "default": 0
          },
          "exported": {
            "type": "integer",
            "title": "Exported",
            "default": 0
          },
          "published": {
            "type": "boolean",
            "title": "Published",
            "default": false
          },
          "totalPosts": {
            "type": "integer",
            "title": "Totalposts",
            "default": 0
          },
          "contentData": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contentdata"
          }
        },
        "type": "object",
        "required": [
          "campaignId",
          "userId"
        ],
        "title": "ContentCreate",
        "description": "Schema for creating content."
      },
      "ContentExportCreate": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform where content was exported (instagram, facebook, linkedin, etc.)",
            "examples": [
              "instagram",
              "facebook",
              "linkedin",
              "twitter"
            ]
          },
          "exported_at": {
            "type": "string",
            "format": "date-time",
            "title": "Exported At",
            "description": "Timestamp when the content was exported"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional export metadata (post URL, platform-specific IDs, etc.)"
          }
        },
        "type": "object",
        "required": [
          "platform",
          "exported_at"
        ],
        "title": "ContentExportCreate",
        "description": "Schema for creating a new content export record.\n\nRMM L2: Creating an export is creating a resource, not an action."
      },
      "ContentExportListResponse": {
        "properties": {
          "content_id": {
            "type": "string",
            "title": "Content Id",
            "description": "ID of the content"
          },
          "exports": {
            "items": {
              "$ref": "#/components/schemas/ContentExportResponse"
            },
            "type": "array",
            "title": "Exports",
            "description": "List of export records for this content"
          },
          "total_exports": {
            "type": "integer",
            "title": "Total Exports",
            "description": "Total number of exports"
          }
        },
        "type": "object",
        "required": [
          "content_id",
          "exports",
          "total_exports"
        ],
        "title": "ContentExportListResponse",
        "description": "Schema for list of content exports.\n\nRMM L2: GET /content/{id}/exports returns list of export resources."
      },
      "ContentExportResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique identifier for the export record"
          },
          "content_id": {
            "type": "string",
            "title": "Content Id",
            "description": "ID of the content that was exported"
          },
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform where content was exported"
          },
          "exported_at": {
            "type": "string",
            "title": "Exported At",
            "description": "Timestamp when content was exported"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "description": "When the export record was created"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Additional export metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "content_id",
          "platform",
          "exported_at",
          "created_at"
        ],
        "title": "ContentExportResponse",
        "description": "Schema for content export response.\n\nRMM L2: Response includes the created export resource with its ID."
      },
      "ContentResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "campaignId": {
            "type": "integer",
            "title": "Campaignid"
          },
          "userId": {
            "type": "string",
            "title": "Userid"
          },
          "readyForReview": {
            "type": "integer",
            "title": "Readyforreview"
          },
          "approved": {
            "type": "integer",
            "title": "Approved"
          },
          "exported": {
            "type": "integer",
            "title": "Exported"
          },
          "published": {
            "type": "boolean",
            "title": "Published"
          },
          "totalPosts": {
            "type": "integer",
            "title": "Totalposts"
          },
          "contentData": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contentdata"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "id",
          "campaignId",
          "userId",
          "readyForReview",
          "approved",
          "exported",
          "published",
          "totalPosts",
          "contentData",
          "createdAt",
          "updatedAt"
        ],
        "title": "ContentResponse",
        "description": "Schema for content response."
      },
      "ContentStatus": {
        "type": "string",
        "enum": [
          "draft",
          "pending",
          "approved",
          "published",
          "rejected"
        ],
        "title": "ContentStatus",
        "description": "Valid content status values."
      },
      "ContentStatusResponse": {
        "properties": {
          "contentId": {
            "type": "string",
            "title": "Contentid",
            "description": "ID of the content"
          },
          "status": {
            "$ref": "#/components/schemas/ContentStatus",
            "description": "Current status of the content"
          },
          "approvedBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approvedby",
            "description": "User ID who approved the content"
          },
          "approvedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approvedat",
            "description": "Timestamp when content was approved"
          },
          "rejectedBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rejectedby",
            "description": "User ID who rejected the content"
          },
          "rejectedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rejectedat",
            "description": "Timestamp when content was rejected"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Notes about the status change"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "Timestamp of the status update"
          }
        },
        "type": "object",
        "required": [
          "contentId",
          "status",
          "updatedAt"
        ],
        "title": "ContentStatusResponse",
        "description": "Response after updating content status.\n\nReturns the updated content with its new status and metadata.",
        "example": {
          "approvedAt": "2025-10-02T18:20:00Z",
          "approvedBy": "user123",
          "contentId": "content123",
          "status": "approved",
          "updatedAt": "2025-10-02T18:20:00Z"
        }
      },
      "ContentStatusUpdate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ContentStatus",
            "description": "New status for the content"
          },
          "approvedBy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approvedby",
            "description": "User ID who approved/rejected the content"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes",
            "description": "Optional notes about the status change"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ContentStatusUpdate",
        "description": "Request to update content status.\n\nRMM L2 Compliance: PATCH updates a specific field (status) on the content resource.",
        "example": {
          "approvedBy": "user123",
          "notes": "Looks great!",
          "status": "approved"
        }
      },
      "ContentUpdate": {
        "properties": {
          "readyForReview": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Readyforreview"
          },
          "approved": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Approved"
          },
          "exported": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exported"
          },
          "published": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published"
          },
          "totalPosts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Totalposts"
          },
          "contentData": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contentdata"
          }
        },
        "type": "object",
        "title": "ContentUpdate",
        "description": "Schema for updating content."
      },
      "ContentVersionCreate": {
        "properties": {
          "parent_content_id": {
            "type": "string",
            "title": "Parent Content Id",
            "description": "ID of the parent content being versioned"
          },
          "custom_prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Prompt",
            "description": "Optional custom prompt for image generation. If not provided, uses parent's prompt."
          }
        },
        "type": "object",
        "required": [
          "parent_content_id"
        ],
        "title": "ContentVersionCreate",
        "description": "Request schema for creating a new content version.\n\nReplaces V1's RegenerationRequest with REST resource approach.\nInstead of \"regenerating\", we're creating a new version.",
        "example": {
          "custom_prompt": "Modern office workspace with natural lighting",
          "parent_content_id": "content-123"
        }
      },
      "ContentVersionResponse": {
        "properties": {
          "version_id": {
            "type": "string",
            "title": "Version Id",
            "description": "Unique ID for this version"
          },
          "parent_content_id": {
            "type": "string",
            "title": "Parent Content Id",
            "description": "ID of parent content"
          },
          "image_url": {
            "type": "string",
            "title": "Image Url",
            "description": "URL of newly generated image"
          },
          "caption_text": {
            "type": "string",
            "title": "Caption Text",
            "description": "Generated caption text"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "Prompt used for generation"
          },
          "generation_count": {
            "type": "integer",
            "title": "Generation Count",
            "description": "Total number of versions generated for this content"
          },
          "remaining_generations": {
            "type": "integer",
            "title": "Remaining Generations",
            "description": "Remaining generations available in quota"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Version creation timestamp"
          }
        },
        "type": "object",
        "required": [
          "version_id",
          "parent_content_id",
          "image_url",
          "caption_text",
          "prompt",
          "generation_count",
          "remaining_generations",
          "created_at"
        ],
        "title": "ContentVersionResponse",
        "description": "Response schema for content version creation.\n\nReturns the newly created version with metadata and remaining quota.",
        "example": {
          "caption_text": "Innovative workspace design for modern teams",
          "created_at": "2024-01-15T10:30:00Z",
          "generation_count": 2,
          "image_url": "https://cdn.example.com/image-789.jpg",
          "parent_content_id": "content-123",
          "prompt": "Modern office workspace with natural lighting",
          "remaining_generations": 8,
          "version_id": "version-456"
        }
      },
      "CrawlPageResponse": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "The crawled URL"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title",
            "description": "Page title"
          },
          "textContent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textcontent",
            "description": "Extracted text content"
          },
          "metaDescription": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadescription",
            "description": "Meta description"
          },
          "discoveredUrls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Discoveredurls",
            "description": "URLs found on page"
          },
          "statusCode": {
            "type": "integer",
            "title": "Statuscode",
            "description": "HTTP status code",
            "default": 200
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if failed"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "CrawlPageResponse",
        "description": "Response from crawling a page."
      },
      "CrawlPageWorkflowResponse": {
        "properties": {
          "pageUrl": {
            "type": "string",
            "title": "Pageurl",
            "description": "URL that was crawled"
          },
          "crawlStatus": {
            "type": "string",
            "title": "Crawlstatus",
            "description": "Status of crawl operation"
          },
          "discoveredUrls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Discoveredurls",
            "description": "URLs discovered on this page"
          },
          "pageId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pageid",
            "description": "ID of stored page (if successful)"
          },
          "errorMessage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Errormessage",
            "description": "Error message if crawl failed"
          }
        },
        "type": "object",
        "required": [
          "pageUrl",
          "crawlStatus"
        ],
        "title": "CrawlPageWorkflowResponse",
        "description": "Response model for single-page crawl operation via workflow."
      },
      "CrawlQueueResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Queue entry ID"
          },
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Associated brand ID"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to crawl"
          },
          "baseDomain": {
            "type": "string",
            "title": "Basedomain",
            "description": "Base domain for this crawl session"
          },
          "status": {
            "$ref": "#/components/schemas/CrawlStatus",
            "description": "Current crawl status"
          },
          "priority": {
            "type": "integer",
            "title": "Priority",
            "description": "Priority (higher numbers crawled first)"
          },
          "discoveredFrom": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Discoveredfrom",
            "description": "URL this was discovered from"
          },
          "errorMessage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Errormessage",
            "description": "Error message if failed"
          },
          "pageId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pageid",
            "description": "ID of created page if successful"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat",
            "description": "When URL was added to queue"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Last status update"
          }
        },
        "type": "object",
        "required": [
          "id",
          "brandId",
          "url",
          "baseDomain",
          "status",
          "priority",
          "discoveredFrom",
          "errorMessage",
          "pageId",
          "createdAt",
          "updatedAt"
        ],
        "title": "CrawlQueueResponse",
        "description": "Response model for crawl queue entries."
      },
      "CrawlQueueUpdate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CrawlStatus",
            "description": "New status for the URL"
          },
          "errorMessage": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Errormessage",
            "description": "Error message if status is failed"
          },
          "pageId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pageid",
            "description": "ID of created page if successful"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "CrawlQueueUpdate",
        "description": "Request model for updating crawl queue entry status."
      },
      "CrawlStatus": {
        "type": "string",
        "enum": [
          "pending",
          "crawling",
          "completed",
          "failed",
          "skipped"
        ],
        "title": "CrawlStatus",
        "description": "Status of a URL in the crawl queue."
      },
      "CrawledPageResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id",
            "description": "Page ID"
          },
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Associated brand ID"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Page URL"
          },
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Page title"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Page content (text)"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PageMetadata"
              },
              {
                "type": "null"
              }
            ],
            "description": "Page metadata"
          },
          "processed": {
            "type": "boolean",
            "title": "Processed",
            "description": "Whether page has been processed",
            "default": false
          },
          "crawledAt": {
            "type": "string",
            "format": "date-time",
            "title": "Crawledat",
            "description": "Crawl timestamp"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat",
            "description": "Last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "brandId",
          "url",
          "title",
          "content",
          "crawledAt"
        ],
        "title": "CrawledPageResponse",
        "description": "Response model for a crawled page."
      },
      "DayContent": {
        "properties": {
          "dayNumber": {
            "type": "integer",
            "title": "Daynumber"
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "default": false
          },
          "postsToGenerate": {
            "type": "integer",
            "title": "Poststogenerate",
            "default": 3
          },
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PostSchema"
            },
            "type": "array",
            "title": "Posts"
          }
        },
        "type": "object",
        "required": [
          "dayNumber"
        ],
        "title": "DayContent",
        "description": "Schema for daily content."
      },
      "ExtractKnowledgeRequest": {
        "properties": {
          "workflowId": {
            "type": "string",
            "title": "Workflowid",
            "description": "Workflow ID"
          },
          "crawledPages": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Crawledpages",
            "description": "List of crawled page data"
          }
        },
        "type": "object",
        "required": [
          "workflowId",
          "crawledPages"
        ],
        "title": "ExtractKnowledgeRequest",
        "description": "Request for extracting brand knowledge from crawled pages."
      },
      "ExtractKnowledgeResponse": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "personalityTraits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Personalitytraits",
            "description": "2-5 personality traits as lowercase adjectives"
          },
          "toneAttributes": {
            "$ref": "#/components/schemas/src__schemas__brand_crawler__ToneAttributes",
            "description": "Communication tone attributes"
          },
          "colorPalette": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Colorpalette",
            "description": "3-5 hex color codes"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/ProductInfo"
            },
            "type": "array",
            "title": "Products",
            "description": "Products and services"
          },
          "brandDescription": {
            "type": "string",
            "title": "Branddescription",
            "description": "1-2 sentence brand description"
          },
          "valueProposition": {
            "type": "string",
            "title": "Valueproposition",
            "description": "1-2 sentence value proposition"
          },
          "targetAudience": {
            "type": "string",
            "title": "Targetaudience",
            "description": "1-2 sentence target audience description"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "personalityTraits",
          "toneAttributes",
          "colorPalette",
          "products",
          "brandDescription",
          "valueProposition",
          "targetAudience"
        ],
        "title": "ExtractKnowledgeResponse",
        "description": "Response from brand knowledge extraction."
      },
      "GeneratedContent": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "campaignId": {
            "type": "integer",
            "title": "Campaignid"
          },
          "userId": {
            "type": "string",
            "title": "Userid"
          },
          "readyForReview": {
            "type": "integer",
            "title": "Readyforreview"
          },
          "approved": {
            "type": "integer",
            "title": "Approved"
          },
          "exported": {
            "type": "integer",
            "title": "Exported"
          },
          "published": {
            "type": "boolean",
            "title": "Published"
          },
          "totalPosts": {
            "type": "integer",
            "title": "Totalposts"
          },
          "weeks": {
            "items": {
              "$ref": "#/components/schemas/WeekContent"
            },
            "type": "array",
            "title": "Weeks"
          }
        },
        "type": "object",
        "required": [
          "id",
          "campaignId",
          "userId",
          "readyForReview",
          "approved",
          "exported",
          "published",
          "totalPosts"
        ],
        "title": "GeneratedContent",
        "description": "Schema for generated content with nested structure."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ImageBatchRequest": {
        "properties": {
          "prompts": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Prompts",
            "description": "List of image generation prompts"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "Model to use",
            "default": "dall-e-3"
          },
          "size": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size",
            "description": "Image size for all images",
            "default": "1024x1024"
          },
          "quality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality",
            "description": "Quality level",
            "default": "standard"
          },
          "style": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Style",
            "description": "Style",
            "default": "vivid"
          },
          "brandColors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandcolors",
            "description": "Brand colors to incorporate"
          },
          "brandStyle": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandstyle",
            "description": "Brand visual style guidelines"
          }
        },
        "type": "object",
        "required": [
          "prompts"
        ],
        "title": "ImageBatchRequest",
        "description": "Schema for batch image generation request."
      },
      "ImageBatchResponse": {
        "properties": {
          "batchId": {
            "type": "string",
            "title": "Batchid",
            "description": "Batch operation ID"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            },
            "type": "array",
            "title": "Images",
            "description": "Generated images"
          },
          "totalRequested": {
            "type": "integer",
            "title": "Totalrequested",
            "description": "Total images requested"
          },
          "totalGenerated": {
            "type": "integer",
            "title": "Totalgenerated",
            "description": "Total images successfully generated"
          },
          "failedPrompts": {
            "items": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "array",
            "title": "Failedprompts",
            "description": "Failed prompts with error messages"
          }
        },
        "type": "object",
        "required": [
          "batchId",
          "images",
          "totalRequested",
          "totalGenerated"
        ],
        "title": "ImageBatchResponse",
        "description": "Schema for batch image generation response."
      },
      "ImageGenerateRequest": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "Image generation prompt"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "Model to use (dall-e-3, midjourney, stable-diffusion)",
            "default": "dall-e-3"
          },
          "size": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size",
            "description": "Image size",
            "default": "1024x1024"
          },
          "quality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Quality",
            "description": "Quality level (standard, hd)",
            "default": "standard"
          },
          "style": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Style",
            "description": "Style (vivid, natural)",
            "default": "vivid"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 4.0,
                "minimum": 1.0
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "description": "Number of images to generate",
            "default": 1
          },
          "brandColors": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandcolors",
            "description": "Brand colors to incorporate"
          },
          "brandStyle": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brandstyle",
            "description": "Brand visual style guidelines"
          }
        },
        "type": "object",
        "required": [
          "prompt"
        ],
        "title": "ImageGenerateRequest",
        "description": "Schema for image generation request."
      },
      "ImageRemixRequest": {
        "properties": {
          "modifications": {
            "type": "string",
            "title": "Modifications",
            "description": "Description of modifications to make"
          },
          "styleTransfer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Styletransfer",
            "description": "Style to transfer to the image"
          },
          "colorAdjustments": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coloradjustments",
            "description": "Color adjustment parameters"
          },
          "keepComposition": {
            "type": "boolean",
            "title": "Keepcomposition",
            "description": "Whether to maintain original composition",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "modifications"
        ],
        "title": "ImageRemixRequest",
        "description": "Schema for image remix request."
      },
      "ImageResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Image ID"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "Image URL"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "Generation prompt used"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model used"
          },
          "size": {
            "type": "string",
            "title": "Size",
            "description": "Image dimensions"
          },
          "quality": {
            "type": "string",
            "title": "Quality",
            "description": "Quality level"
          },
          "style": {
            "type": "string",
            "title": "Style",
            "description": "Style applied"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat",
            "description": "Generation timestamp"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Additional metadata"
          }
        },
        "type": "object",
        "required": [
          "id",
          "url",
          "prompt",
          "model",
          "size",
          "quality",
          "style",
          "createdAt"
        ],
        "title": "ImageResponse",
        "description": "Schema for generated image response."
      },
      "InitializeCrawlRequest": {
        "properties": {
          "startingUrl": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Startingurl",
            "description": "Initial URL to start crawling"
          },
          "maxPages": {
            "type": "integer",
            "maximum": 1000.0,
            "minimum": 1.0,
            "title": "Maxpages",
            "description": "Maximum pages to crawl",
            "default": 50
          }
        },
        "type": "object",
        "required": [
          "startingUrl"
        ],
        "title": "InitializeCrawlRequest",
        "description": "Request model for initializing a new crawl session."
      },
      "InitializeCrawlResponse": {
        "properties": {
          "crawlSessionId": {
            "type": "string",
            "title": "Crawlsessionid",
            "description": "Unique ID for this crawl session"
          },
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "startingUrl": {
            "type": "string",
            "title": "Startingurl",
            "description": "Initial URL"
          },
          "maxPages": {
            "type": "integer",
            "title": "Maxpages",
            "description": "Maximum pages to crawl"
          },
          "baseDomain": {
            "type": "string",
            "title": "Basedomain",
            "description": "Detected base domain"
          },
          "urlsQueued": {
            "type": "integer",
            "title": "Urlsqueued",
            "description": "Number of URLs initially queued"
          }
        },
        "type": "object",
        "required": [
          "crawlSessionId",
          "brandId",
          "startingUrl",
          "maxPages",
          "baseDomain",
          "urlsQueued"
        ],
        "title": "InitializeCrawlResponse",
        "description": "Response model for crawl initialization."
      },
      "IntegrationAuthRequest": {
        "properties": {
          "authCode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authcode",
            "description": "OAuth authorization code"
          },
          "accessToken": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accesstoken",
            "description": "Direct access token"
          },
          "refreshToken": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Refreshtoken",
            "description": "Refresh token"
          },
          "scope": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope",
            "description": "Requested permissions"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Platform-specific metadata"
          }
        },
        "type": "object",
        "title": "IntegrationAuthRequest",
        "description": "Schema for integration authentication request."
      },
      "IntegrationRedirectRequest": {
        "properties": {
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform name (instagram, facebook, linkedin, twitter)"
          },
          "scope": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope",
            "description": "Requested OAuth scopes"
          },
          "state": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "State",
            "description": "State parameter for OAuth flow"
          }
        },
        "type": "object",
        "required": [
          "platform"
        ],
        "title": "IntegrationRedirectRequest",
        "description": "Schema for integration redirect URI request."
      },
      "IntegrationRedirectResponse": {
        "properties": {
          "redirectUri": {
            "type": "string",
            "title": "Redirecturi",
            "description": "OAuth redirect URI"
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "State parameter to verify callback"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "title": "Expiresat",
            "description": "Expiration time for this redirect"
          }
        },
        "type": "object",
        "required": [
          "redirectUri",
          "state",
          "expiresAt"
        ],
        "title": "IntegrationRedirectResponse",
        "description": "Schema for integration redirect URI response."
      },
      "IntegrationResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Integration ID"
          },
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "Platform name"
          },
          "accountId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accountid",
            "description": "Connected account ID"
          },
          "accountName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accountname",
            "description": "Connected account name"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Integration status (connected, disconnected, error)"
          },
          "scope": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Scope",
            "description": "Granted permissions"
          },
          "expiresAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expiresat",
            "description": "Token expiration time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat",
            "description": "Integration creation time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "Last update time"
          },
          "metadata": {
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Platform-specific data"
          }
        },
        "type": "object",
        "required": [
          "id",
          "platform",
          "status",
          "createdAt",
          "updatedAt"
        ],
        "title": "IntegrationResponse",
        "description": "Schema for integration response."
      },
      "IntegrationsListResponse": {
        "properties": {
          "integrations": {
            "items": {
              "$ref": "#/components/schemas/IntegrationResponse"
            },
            "type": "array",
            "title": "Integrations",
            "description": "List of integrations"
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "Total number of integrations"
          }
        },
        "type": "object",
        "required": [
          "integrations",
          "total"
        ],
        "title": "IntegrationsListResponse",
        "description": "Schema for listing all integrations."
      },
      "NextUrlResponse": {
        "properties": {
          "queueEntryId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Queueentryid",
            "description": "Queue entry ID (null if no URLs available)"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Next URL to crawl (null if none available)"
          },
          "baseDomain": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Basedomain",
            "description": "Base domain for link filtering"
          },
          "hasMoreUrls": {
            "type": "boolean",
            "title": "Hasmoreurls",
            "description": "Whether more URLs are available in queue"
          },
          "totalPending": {
            "type": "integer",
            "title": "Totalpending",
            "description": "Total number of pending URLs"
          },
          "totalCompleted": {
            "type": "integer",
            "title": "Totalcompleted",
            "description": "Total number of completed URLs"
          }
        },
        "type": "object",
        "required": [
          "queueEntryId",
          "url",
          "baseDomain",
          "hasMoreUrls",
          "totalPending",
          "totalCompleted"
        ],
        "title": "NextUrlResponse",
        "description": "Response model for next URL to crawl."
      },
      "OnboardingStatus": {
        "type": "string",
        "enum": [
          "completed"
        ],
        "title": "OnboardingStatus",
        "description": "Enum for onboarding completion status."
      },
      "PageMetadata": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Page meta description"
          },
          "metaDescription": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadescription",
            "description": "Page meta description (alias)"
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Keywords",
            "description": "Page keywords"
          },
          "author": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Author",
            "description": "Page author"
          },
          "publishedDate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Publisheddate",
            "description": "Publication date"
          },
          "lastModified": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastmodified",
            "description": "Last modification date"
          },
          "pageType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pagetype",
            "description": "Type of page (blog, product, etc)"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Language",
            "description": "Page language code",
            "default": "en"
          },
          "discoveredUrls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Discoveredurls",
            "description": "Discovered URLs"
          },
          "crawledAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Crawledat",
            "description": "Crawl timestamp"
          },
          "statusCode": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Statuscode",
            "description": "HTTP status code"
          },
          "contentType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contenttype",
            "description": "Content type"
          }
        },
        "type": "object",
        "title": "PageMetadata",
        "description": "Metadata for a crawled page."
      },
      "PostContent": {
        "properties": {
          "selected_image": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Selected Image",
            "description": "URL of the selected image"
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "title": "Text",
            "description": "Post caption text"
          }
        },
        "type": "object",
        "required": [
          "selected_image",
          "text"
        ],
        "title": "PostContent",
        "description": "Schema for post content in approval request."
      },
      "PostSchema": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "default": ""
          },
          "imagePrompt": {
            "type": "string",
            "title": "Imageprompt",
            "default": ""
          },
          "imageUrls": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Imageurls"
          },
          "textVersions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Textversions"
          },
          "generationCount": {
            "type": "integer",
            "title": "Generationcount",
            "default": 1
          },
          "regenerateCount": {
            "type": "integer",
            "title": "Regeneratecount",
            "default": 3
          },
          "posted": {
            "type": "boolean",
            "title": "Posted",
            "default": false
          },
          "approved": {
            "type": "boolean",
            "title": "Approved",
            "default": false
          },
          "selectedImageIndex": {
            "type": "integer",
            "title": "Selectedimageindex",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "PostSchema",
        "description": "Schema for individual social media post."
      },
      "ProductInfo": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Product name"
          },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "Product category"
          }
        },
        "type": "object",
        "required": [
          "name",
          "category"
        ],
        "title": "ProductInfo",
        "description": "Product information schema."
      },
      "PublishedPostSummary": {
        "properties": {
          "week_key": {
            "type": "string",
            "title": "Week Key",
            "description": "Week identifier (e.g., week_1)"
          },
          "day_key": {
            "type": "string",
            "title": "Day Key",
            "description": "Day identifier (e.g., day_1)"
          },
          "post_key": {
            "type": "string",
            "title": "Post Key",
            "description": "Post identifier (e.g., post_1)"
          },
          "post_name": {
            "type": "string",
            "title": "Post Name",
            "description": "Unique post name for tracking"
          },
          "scheduled_time": {
            "type": "string",
            "format": "date-time",
            "title": "Scheduled Time",
            "description": "Scheduled publication time"
          }
        },
        "type": "object",
        "required": [
          "week_key",
          "day_key",
          "post_key",
          "post_name",
          "scheduled_time"
        ],
        "title": "PublishedPostSummary",
        "description": "Summary of a single published post within a publication."
      },
      "RegenerationQuotaResponse": {
        "properties": {
          "remaining": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Remaining",
            "description": "Remaining regenerations allowed"
          },
          "totalAllowed": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Totalallowed",
            "description": "Total regenerations allowed per plan"
          },
          "used": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Used",
            "description": "Number of regenerations used"
          },
          "plan": {
            "type": "string",
            "enum": [
              "FREE",
              "PRO"
            ],
            "title": "Plan",
            "description": "User's subscription plan"
          }
        },
        "type": "object",
        "required": [
          "remaining",
          "totalAllowed",
          "used",
          "plan"
        ],
        "title": "RegenerationQuotaResponse",
        "description": "Schema for regeneration quota response."
      },
      "RegenerationRequest": {
        "properties": {
          "contentId": {
            "type": "string",
            "title": "Contentid",
            "description": "ID of the content to regenerate"
          },
          "prompt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prompt",
            "description": "Optional custom prompt for regeneration"
          }
        },
        "type": "object",
        "required": [
          "contentId"
        ],
        "title": "RegenerationRequest",
        "description": "Request schema for content regeneration.\n\nThis matches the V1 structure from tag v0.2.46."
      },
      "RegenerationResponse": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL of the newly generated image"
          },
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "The prompt used for generation"
          },
          "remainingGenerations": {
            "type": "integer",
            "title": "Remaininggenerations",
            "description": "Number of generations remaining"
          },
          "newText": {
            "type": "string",
            "title": "Newtext",
            "description": "New caption text generated"
          }
        },
        "type": "object",
        "required": [
          "url",
          "prompt",
          "remainingGenerations",
          "newText"
        ],
        "title": "RegenerationResponse",
        "description": "Response schema for content regeneration.\n\nThis matches the V1 structure from tag v0.2.46."
      },
      "SceneMixPlanCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Plan name"
          },
          "policyId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policyid",
            "description": "Associated policy ID"
          },
          "durationDays": {
            "type": "integer",
            "title": "Durationdays",
            "description": "Plan duration in days"
          },
          "postsPerDay": {
            "type": "integer",
            "title": "Postsperday",
            "description": "Number of posts per day"
          },
          "contentMix": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Contentmix",
            "description": "Content type distribution percentages"
          },
          "themes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Themes",
            "description": "Content themes"
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Keywords",
            "description": "Target keywords"
          },
          "autoGenerate": {
            "type": "boolean",
            "title": "Autogenerate",
            "description": "Auto-generate content on approval",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "durationDays",
          "postsPerDay",
          "contentMix"
        ],
        "title": "SceneMixPlanCreate",
        "description": "Schema for creating a scene mix plan."
      },
      "SceneMixPlanResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Plan ID"
          },
          "campaignId": {
            "type": "string",
            "title": "Campaignid",
            "description": "Campaign ID"
          },
          "policyId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Policyid",
            "description": "Associated policy ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Plan name"
          },
          "durationDays": {
            "type": "integer",
            "title": "Durationdays",
            "description": "Plan duration in days"
          },
          "postsPerDay": {
            "type": "integer",
            "title": "Postsperday",
            "description": "Number of posts per day"
          },
          "contentMix": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Contentmix",
            "description": "Content type distribution"
          },
          "themes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Themes",
            "description": "Content themes"
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Keywords",
            "description": "Target keywords"
          },
          "autoGenerate": {
            "type": "boolean",
            "title": "Autogenerate",
            "description": "Auto-generate enabled",
            "default": false
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Plan status (draft, active, completed)",
            "default": "draft"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "Last update timestamp"
          },
          "executionStats": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Executionstats",
            "description": "Execution statistics"
          }
        },
        "type": "object",
        "required": [
          "id",
          "campaignId",
          "name",
          "durationDays",
          "postsPerDay",
          "contentMix",
          "createdAt",
          "updatedAt"
        ],
        "title": "SceneMixPlanResponse",
        "description": "Schema for scene mix plan response."
      },
      "SceneMixPolicyCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Policy name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Policy description"
          },
          "contentTypes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Contenttypes",
            "description": "Allowed content types"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Platforms",
            "description": "Target platforms"
          },
          "frequencyRules": {
            "additionalProperties": true,
            "type": "object",
            "title": "Frequencyrules",
            "description": "Content frequency rules"
          },
          "diversitySettings": {
            "additionalProperties": true,
            "type": "object",
            "title": "Diversitysettings",
            "description": "Content diversity settings"
          },
          "qualityThresholds": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Qualitythresholds",
            "description": "Quality thresholds"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Whether policy is active",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "name",
          "contentTypes",
          "platforms",
          "frequencyRules"
        ],
        "title": "SceneMixPolicyCreate",
        "description": "Schema for creating a scene mix policy."
      },
      "SceneMixPolicyResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Policy ID"
          },
          "campaignId": {
            "type": "string",
            "title": "Campaignid",
            "description": "Campaign ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Policy name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Policy description"
          },
          "contentTypes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Contenttypes",
            "description": "Allowed content types"
          },
          "platforms": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Platforms",
            "description": "Target platforms"
          },
          "frequencyRules": {
            "additionalProperties": true,
            "type": "object",
            "title": "Frequencyrules",
            "description": "Content frequency rules"
          },
          "diversitySettings": {
            "additionalProperties": true,
            "type": "object",
            "title": "Diversitysettings",
            "description": "Content diversity settings"
          },
          "qualityThresholds": {
            "additionalProperties": {
              "type": "number"
            },
            "type": "object",
            "title": "Qualitythresholds",
            "description": "Quality thresholds"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Whether policy is active",
            "default": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "title": "Updatedat",
            "description": "Last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "campaignId",
          "name",
          "contentTypes",
          "platforms",
          "frequencyRules",
          "createdAt",
          "updatedAt"
        ],
        "title": "SceneMixPolicyResponse",
        "description": "Schema for scene mix policy response."
      },
      "SceneMixPolicyUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "contentTypes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contenttypes"
          },
          "platforms": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platforms"
          },
          "frequencyRules": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequencyrules"
          },
          "diversitySettings": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Diversitysettings"
          },
          "qualityThresholds": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "number"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Qualitythresholds"
          },
          "active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Active"
          }
        },
        "type": "object",
        "title": "SceneMixPolicyUpdate",
        "description": "Schema for updating a scene mix policy."
      },
      "ToneAttributesV2": {
        "properties": {
          "formality": {
            "type": "string",
            "title": "Formality",
            "description": "Formality level (casual, professional, formal)"
          },
          "enthusiasm": {
            "type": "string",
            "title": "Enthusiasm",
            "description": "Enthusiasm level (low, medium, high)"
          },
          "expertise": {
            "type": "string",
            "title": "Expertise",
            "description": "Expertise level (beginner, intermediate, expert)"
          }
        },
        "type": "object",
        "required": [
          "formality",
          "enthusiasm",
          "expertise"
        ],
        "title": "ToneAttributesV2",
        "description": "V2 Tone attributes for brand knowledge."
      },
      "UpdateTextVersionsRequest": {
        "properties": {
          "content_id": {
            "type": "string",
            "title": "Content Id",
            "description": "Content ID to update"
          },
          "week_num": {
            "type": "integer",
            "title": "Week Num",
            "description": "Week number in campaign"
          },
          "day_num": {
            "type": "integer",
            "title": "Day Num",
            "description": "Day number in week"
          },
          "post_num": {
            "type": "integer",
            "title": "Post Num",
            "description": "Post number in day"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Currently selected text"
          },
          "text_versions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Text Versions",
            "description": "Array of text versions"
          },
          "selected_image_index": {
            "type": "integer",
            "title": "Selected Image Index",
            "description": "Currently selected image index"
          }
        },
        "type": "object",
        "required": [
          "content_id",
          "week_num",
          "day_num",
          "post_num",
          "text",
          "text_versions",
          "selected_image_index"
        ],
        "title": "UpdateTextVersionsRequest",
        "description": "Request schema for updating text versions.\n\nDirect port from V1 UpdateTextVersionsRequest model."
      },
      "UpdateTextVersionsResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Operation status",
            "default": "success"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Success message",
            "default": "Text versions updated successfully"
          }
        },
        "type": "object",
        "title": "UpdateTextVersionsResponse",
        "description": "Response schema for text versions update.\n\nDirect port from V1 response format."
      },
      "UserProfile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User unique identifier"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User display name"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "description": "User role (USER or ADMIN)",
            "default": "USER"
          },
          "plan": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan",
            "description": "User subscription plan"
          },
          "is_admin": {
            "type": "boolean",
            "title": "Is Admin",
            "description": "Whether user has admin privileges",
            "default": false
          },
          "hasBrand": {
            "type": "boolean",
            "title": "Hasbrand",
            "description": "Whether user has created a brand",
            "default": false
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "Account creation timestamp"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "Last update timestamp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "name"
        ],
        "title": "UserProfile",
        "description": "User profile returned by authentication endpoints."
      },
      "UserRegisterRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User full name"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password",
            "description": "User password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "name",
          "password"
        ],
        "title": "UserRegisterRequest",
        "description": "Request body for user registration."
      },
      "UserRegisterResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Newly created user ID"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "User display name"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "User registered successfully"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "name"
        ],
        "title": "UserRegisterResponse",
        "description": "Response from user registration."
      },
      "UserUpdateRequest": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "User display name"
          },
          "plan": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan",
            "description": "Subscription plan"
          }
        },
        "type": "object",
        "title": "UserUpdateRequest",
        "description": "Request body for updating user profile."
      },
      "UserUpdateResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "User ID"
          },
          "email": {
            "type": "string",
            "title": "Email",
            "description": "User email address"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Updated user name"
          },
          "plan": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Plan",
            "description": "Updated subscription plan"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": "Profile updated successfully"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "name"
        ],
        "title": "UserUpdateResponse",
        "description": "Response from user update."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WeekContent": {
        "properties": {
          "weekNumber": {
            "type": "integer",
            "title": "Weeknumber"
          },
          "days": {
            "items": {
              "$ref": "#/components/schemas/DayContent"
            },
            "type": "array",
            "title": "Days"
          }
        },
        "type": "object",
        "required": [
          "weekNumber"
        ],
        "title": "WeekContent",
        "description": "Schema for weekly content."
      },
      "WorkflowRequest": {
        "properties": {
          "sources": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sources",
            "description": "Website URLs to crawl"
          },
          "maxPages": {
            "type": "integer",
            "title": "Maxpages",
            "description": "Maximum pages to crawl",
            "default": 100
          }
        },
        "type": "object",
        "required": [
          "sources"
        ],
        "title": "WorkflowRequest",
        "description": "Request for starting a crawling workflow."
      },
      "WorkflowResponse": {
        "properties": {
          "workflowId": {
            "type": "string",
            "title": "Workflowid",
            "description": "Unique workflow identifier"
          },
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand identifier"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Overall workflow status: running, completed, failed"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/WorkflowStep"
            },
            "type": "array",
            "title": "Steps",
            "description": "Workflow steps with status"
          },
          "createdAt": {
            "type": "string",
            "title": "Createdat",
            "description": "ISO timestamp when workflow was created"
          },
          "progress": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress",
            "description": "Overall progress percentage 0-100"
          },
          "currentStep": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currentstep",
            "description": "Currently executing step"
          },
          "sources": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Sources",
            "description": "URLs being crawled"
          },
          "pagesCrawled": {
            "type": "integer",
            "title": "Pagescrawled",
            "description": "Number of pages successfully downloaded/scraped",
            "default": 0
          },
          "pagesProcessed": {
            "type": "integer",
            "title": "Pagesprocessed",
            "description": "Number of pages analyzed for knowledge extraction",
            "default": 0
          },
          "totalPages": {
            "type": "integer",
            "title": "Totalpages",
            "description": "Total pages discovered (can increase during crawl)",
            "default": 0
          },
          "totalPercentage": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 100.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Totalpercentage",
            "description": "Detailed progress percentage with decimals"
          },
          "result": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result",
            "description": "Final workflow result (only when completed)"
          }
        },
        "type": "object",
        "required": [
          "workflowId",
          "brandId",
          "status",
          "steps",
          "createdAt"
        ],
        "title": "WorkflowResponse",
        "description": "Response from workflow operations with detailed progress tracking."
      },
      "WorkflowStep": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Step name: crawling, analyzing, or completed"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "description": "Step status: pending, running, completed, or failed"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "ISO timestamp when step started"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "ISO timestamp when step completed"
          }
        },
        "type": "object",
        "required": [
          "name",
          "status"
        ],
        "title": "WorkflowStep",
        "description": "Schema for workflow step tracking."
      },
      "src__schemas__brand_crawler__CrawlPageRequest": {
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "description": "URL to crawl"
          },
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID for domain filtering"
          },
          "extractLinks": {
            "type": "boolean",
            "title": "Extractlinks",
            "description": "Whether to extract links",
            "default": true
          },
          "waitForSelector": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Waitforselector",
            "description": "CSS selector to wait for"
          }
        },
        "type": "object",
        "required": [
          "url",
          "brandId"
        ],
        "title": "CrawlPageRequest",
        "description": "Request for crawling a single page."
      },
      "src__schemas__brand_crawler__ToneAttributes": {
        "properties": {
          "formality": {
            "type": "string",
            "title": "Formality",
            "description": "Formality level: casual, semi-formal, formal"
          },
          "enthusiasm": {
            "type": "string",
            "title": "Enthusiasm",
            "description": "Enthusiasm level: low, medium, high"
          },
          "expertise": {
            "type": "string",
            "title": "Expertise",
            "description": "Expertise level: beginner, intermediate, authoritative"
          }
        },
        "type": "object",
        "required": [
          "formality",
          "enthusiasm",
          "expertise"
        ],
        "title": "ToneAttributes",
        "description": "Tone attributes schema."
      },
      "src__schemas__brand_knowledge__BrandKnowledgeV2Response": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "personalityTraits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Personalitytraits",
            "description": "2-5 lowercase adjectives describing brand personality"
          },
          "toneAttributes": {
            "$ref": "#/components/schemas/ToneAttributesV2",
            "description": "Structured tone characteristics"
          },
          "colorPalette": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Colorpalette",
            "description": "3-5 hex color codes from brand visual identity"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/src__schemas__brand_knowledge__ProductV2"
            },
            "type": "array",
            "title": "Products",
            "description": "List of products with name and category"
          },
          "brandDescription": {
            "type": "string",
            "maxLength": 200,
            "title": "Branddescription",
            "description": "1-2 sentences describing the brand"
          },
          "valueProposition": {
            "type": "string",
            "maxLength": 200,
            "title": "Valueproposition",
            "description": "1-2 sentences describing the value proposition"
          },
          "targetAudience": {
            "type": "string",
            "maxLength": 200,
            "title": "Targetaudience",
            "description": "1-2 sentences describing the target audience"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "personalityTraits",
          "toneAttributes",
          "colorPalette",
          "products",
          "brandDescription",
          "valueProposition",
          "targetAudience"
        ],
        "title": "BrandKnowledgeV2Response",
        "description": "V2 Response model for simplified brand knowledge extraction."
      },
      "src__schemas__brand_knowledge__ProductV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Product name"
          },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "Product category"
          }
        },
        "type": "object",
        "required": [
          "name",
          "category"
        ],
        "title": "ProductV2",
        "description": "V2 Product information for brand knowledge."
      },
      "src__schemas__brands__BrandKnowledgeV2Response": {
        "properties": {
          "brandId": {
            "type": "string",
            "title": "Brandid",
            "description": "Brand ID"
          },
          "personalityTraits": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 5,
            "minItems": 2,
            "title": "Personalitytraits",
            "description": "2-5 lowercase adjectives describing brand personality"
          },
          "toneAttributes": {
            "$ref": "#/components/schemas/src__schemas__brands__ToneAttributes",
            "description": "Structured tone attributes"
          },
          "colorPalette": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 5,
            "minItems": 3,
            "title": "Colorpalette",
            "description": "3-5 hex color codes"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/src__schemas__brands__ProductV2"
            },
            "type": "array",
            "title": "Products",
            "description": "List of products with name and category"
          },
          "brandDescription": {
            "type": "string",
            "maxLength": 200,
            "title": "Branddescription",
            "description": "1-2 sentences describing the brand"
          },
          "valueProposition": {
            "type": "string",
            "maxLength": 200,
            "title": "Valueproposition",
            "description": "1-2 sentences describing unique value"
          },
          "targetAudience": {
            "type": "string",
            "maxLength": 200,
            "title": "Targetaudience",
            "description": "1-2 sentences describing target audience"
          }
        },
        "type": "object",
        "required": [
          "brandId",
          "personalityTraits",
          "toneAttributes",
          "colorPalette",
          "products",
          "brandDescription",
          "valueProposition",
          "targetAudience"
        ],
        "title": "BrandKnowledgeV2Response",
        "description": "V2 API response schema for brand knowledge extraction."
      },
      "src__schemas__brands__ProductV2": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Product name"
          },
          "category": {
            "type": "string",
            "title": "Category",
            "description": "Product category"
          }
        },
        "type": "object",
        "required": [
          "name",
          "category"
        ],
        "title": "ProductV2",
        "description": "Product information for brand knowledge."
      },
      "src__schemas__brands__ToneAttributes": {
        "properties": {
          "formality": {
            "type": "string",
            "title": "Formality",
            "description": "Formality level (formal/semi-formal/casual)"
          },
          "enthusiasm": {
            "type": "string",
            "title": "Enthusiasm",
            "description": "Enthusiasm level (low/medium/high)"
          },
          "expertise": {
            "type": "string",
            "title": "Expertise",
            "description": "Expertise level (beginner/authoritative/expert)"
          }
        },
        "type": "object",
        "required": [
          "formality",
          "enthusiasm",
          "expertise"
        ],
        "title": "ToneAttributes",
        "description": "Tone attributes for brand knowledge."
      },
      "src__schemas__crawled_pages__CrawlPageRequest": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "URL to crawl"
          },
          "baseDomain": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Basedomain",
            "description": "Base domain for link filtering (auto-detected if not provided)"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "CrawlPageRequest",
        "description": "Request model for crawling a single page via workflow."
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
